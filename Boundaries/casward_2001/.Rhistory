x=66
#setup CRS
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
#CAS Wards (England)
#setwd("/Users/alex/HE_Lookup/Boundaries/")
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/")
#Read shapefile
polygon <- readOGR("shapefiles/", "England_caswa_2001_clipped")
#Remove unwanted
polygon <- polygon[,-(2:5)]
#ONS_CODE <- "00BYFJ"
WARD_LIST <- as.character(polygon@data$ONS_LABEL)
library(rgdal)
library(rgeos)
library(sp)
library(maptools)
#setup CRS
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
#CAS Wards (England)
#setwd("/Users/alex/HE_Lookup/Boundaries/")
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/")
#Read shapefile
polygon <- readOGR("shapefiles/", "England_caswa_2001_clipped")
#Remove unwanted
polygon <- polygon[,-(2:5)]
#ONS_CODE <- "00BYFJ"
WARD_LIST <- as.character(polygon@data$ONS_LABEL)
ONS_CODE
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
plot(polygonWGS)
nrow(polygonWGS)
polygonWGS@data
as.data.frame(ONS_CODE,row.names=names(polygonWGS))
polygonWGS
?unionSpatialPolygons
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
head(polygonWGS)
polygonWGS@data
getSlots(polygonWGS)
slots(polygonWGS)
attributes(polygonWGS)
polygonWGS$ID
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS@data
polygonWGS <- unionSpatialPolygons(polygonWGS,"ONS_LABEL")
polygonWGS <- unionSpatialPolygons(polygonWGS)
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL)
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS@data
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
x=63
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL)
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
library(rgdal)
library(rgeos)
library(sp)
library(maptools)
#setup CRS
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
#CAS Wards (England)
#setwd("/Users/alex/HE_Lookup/Boundaries/")
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/")
#Read shapefile
polygon <- readOGR("shapefiles/", "England_caswa_2001_clipped")
#Remove unwanted
polygon <- polygon[,-(2:5)]
#ONS_CODE <- "00BYFJ"
WARD_LIST <- as.character(polygon@data$ONS_LABEL)
for (x in 1:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL)
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
print(x)
}
ONS_CODE
plot(polygonWGS)
x
ONS_CODE <- WARD_LIST[x]
x
ONS_CODE
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
plot(polygonWGS)
ONS_CODE
WARD_LIST
WARD_LIST <- as.character(polygon@data$ONS_LABEL)
for (x in 1:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
print(x)
}
ONS_CODE
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
plot(polygonWGS)
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
plot(polygonWGS)
polygonWGS@data
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
WARD_LIST <- unique(as.character(polygon@data$ONS_LABEL)) #unique is required to remove entries with multiple polygons
for (x in 1:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
print(x)
}
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/casward_2001/")
#Read shapefile
polygon <- readOGR("shapefiles/", "Wales_caswa_2001_clipped")
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/")
#Read shapefile
polygon <- readOGR("shapefiles/", "Wales_caswa_2001_clipped")
head(polygon@data)
polygon <- polygon[,-c(1,3:4)]
head(polygon@data)
colnames(polygon@data) <- "ONS_CODE"
head(polygon@data)
WARD_LIST <- unique(as.character(polygon@data$ONS_LABEL)) #unique is required to remove entries with multiple polygons
colnames(polygon@data) <- "ONS_LABEL"
WARD_LIST <- unique(as.character(polygon@data$ONS_LABEL)) #unique is required to remove entries with multiple polygons
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/casward_2001")
for (x in 1:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
}
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/")
#Read shapefile
polygon <- readOGR("shapefiles/", "NIreland_wa_2001_area")
head(polygon@data)
polygon <- polygon[,-1]
head(polygon@data)
colnames(polygon@data) <- "ONS_LABEL"
WARD_LIST <- unique(as.character(polygon@data$ONS_LABEL)) #unique is required to remove entries with multiple polygons
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/casward_2001")
for (x in 1:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
}
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/")
#Read shapefile
polygon <- readOGR("shapefiles/", "Scotland_caswa_2001_area")
head(polygon@data)
polygon <- polygon[,-c(1,3:6)]
head(polygon@data)
colnames(polygon@data) <- "ONS_LABEL"
WARD_LIST <- unique(as.character(polygon@data$ONS_LABEL)) #unique is required to remove entries with multiple polygons
setwd("/Volumes/Macintosh\ HD\ 2/Dropbox/projects/HE_Lookup/Boundaries/casward_2001")
for (x in 1:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
}
x
WARD_LIST
WARD_LIST[1213]
WARD_LIST[x]
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
plot(polygonWGS)
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
gIsValid(polygonWGS)
?fortify
library(ggplot2)
head(@data)
head(polygonWGS@data)
polygonWGS = gBuffer(polygonWGS, width=0, byid=TRUE)
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS = gBuffer(polygonWGS, width=0, byid=TRUE)
polygonWGS
polygonWGS = gBuffer(polygonWGS, width=0, byid=TRUE)
polygonWGS <- spTransform(polygonWGS, CRS(ukgrid))
polygonWGS = gBuffer(polygonWGS, width=0, byid=TRUE)
polygonWGS = fortify(polygonWGS, region="ONS_LABEL")
polygonWGS <- spTransform(polygonWGS, CRS(latlong))
plot(polygonWGS)
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
roundPolygons<-function(shptemp, digitss=3) {
for(i in 1:length(shptemp)) {
shptemp@polygons[[i]]@Polygons[[1]]@coords&<-round(shptemp@polygons[[i]]@Polygons[[1]]@coords,digits=digitss)
}
shptemp
}
polygonWGS <- roundPolygons(polygonWGS)
roundPolygons<-function(shptemp, digitss=3) {
for(i in 1:length(shptemp)) {
shptemp@polygons[[i]]@Polygons[[1]]@coords&<-round(shptemp@polygons[[i]]@Polygons[[1]]@coords,digits=digitss)
}
shptemp
}
polygonWGS@polygons
roundPolygons <- function(shptemp, digitss=3) {
for(i in 1:length(shptemp)) {
shptemp@polygons[[i]]@Polygons[[1]]@coords&<-round(shptemp@polygons[[i]]@Polygons[[1]]@coords,digits=digitss)
}
shptemp
}
roundPolygons <- function(shptemp, digitss=3) {
for(i in 1:length(shptemp)) {
shptemp@polygons[[i]]@Polygons[[1]]@coords <- round(shptemp@polygons[[i]]@Polygons[[1]]@coords,digits=digitss)
}
shptemp
}
polygonWGS <- roundPolygons(polygonWGS)
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
head(polygonWGS)
head(polygonWGS@data)
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
head(polygonWGS@data)
plot(polygonWGS)
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
plot(polygonWGS)
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
plot(polygonWGS)
head(polygonWGS@data)
polygonWGS@data$ONS_CODE <- "27C19"
head(polygonWGS@data)
polygonWGS@data$ONS_CODE <- ONS_CODE
head(polygonWGS@data)
ONS_CODE
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
x
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS@data
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS@data
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS@data
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
nrow(polygonWGS)
polygonWGS
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS@data
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS@data
names(polygonWGS)
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE)) #Convert back to spatial polygon data frame
as.data.frame(ONS_CODE,row.names=names(polygonWGS))
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS@data
polygonWGS@data$ONS_CODE <- ONS_CODE
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(ONS_CODE,row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
head(polygonWGS@data)
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
nrow(polygonWGS)
polygonWGS
as.data.frame(ONS_CODE,row.names=1:4)
?repeat
s{
?repeat
()
?rep
as.data.frame(rep(ONS_CODE,4),row.names=1:4)
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS@polygons
nrow(polygonWGS@polygons)
length(polygonWGS@polygons)
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=1:length(polygonWGS@polygons))) #Convert back to spatial polygon data frame
names(polygonWGS))
names(polygonWGS)
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))
colnames(polygonWGS@data) <- "polygonWGS$ONS_LABEL"
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS@data
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS@data
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0009, topologyPreserve=TRUE) #Simplify
plot(polygonWGS)
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
plot(polygonWGS)
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
polygonWGS@data
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
polygonWGS@data
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0009, topologyPreserve=TRUE) #Simplify
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
head(polygonWGS)
head(polygonWGS@data)
plot(polygonWGS)
plot(polygonWGS)
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
x
for (x in 1214:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
}
length(WARD_LIST)
WARD_LIST <- unique(as.character(polygon@data$ONS_LABEL)) #unique is required to remove entries with multiple polygons
for (x in 1214:length(WARD_LIST)){
ONS_CODE <- WARD_LIST[x]
polygonWGS <- spTransform(polygon[polygon@data$ONS_LABEL == ONS_CODE,], CRS(latlong)) #Set CRS
polygonWGS <- gSimplify(polygonWGS, 0.0000009, topologyPreserve=TRUE) #Simplify
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
polygonWGS <- unionSpatialPolygons(polygonWGS,polygonWGS$ONS_LABEL) #Ensure a single polygon
polygonWGS <- SpatialPolygonsDataFrame(polygonWGS,data=as.data.frame(rep(ONS_CODE,length(polygonWGS@polygons)),row.names=names(polygonWGS))) #Convert back to spatial polygon data frame
colnames(polygonWGS@data) <- "ONS_LABEL"
#Write file
writeOGR(polygonWGS, dsn=paste0(ONS_CODE,".geojson"), layer="polygonWGS", driver="GeoJSON")
remove(polygonWGS)
remove(ONS_CODE)
}
WARD_LIST
